package com.arda.erdem.samet.emre.legalcase;

import java.util.HashMap;
import java.util.Map;

/**
 * Represents a Huffman Tree for encoding characters based on their frequencies.
 * This class constructs a Huffman Tree using a frequency map and generates
 * binary Huffman codes for each character.
 *
 * @fields
 * - `huffmanCodes` (Map<Character, String>): A map storing the Huffman codes for each character.
 * - `root` (HuffmanNode): The root node of the Huffman Tree.
 *
 * @constructor
 * - `HuffmanTree(Map<Character, Integer> frequencyMap)`: Constructs a Huffman Tree using the provided frequency map.
 *   @param frequencyMap A map containing characters and their corresponding frequencies.
 *   @note This constructor uses a min-heap to build the tree efficiently.
 *
 * @methods
 * - `generateCodes(HuffmanNode node, String code)`: Recursively generates Huffman codes for all characters in the tree.
 *   @param node The current `HuffmanNode` being processed.
 *   @param code The binary code accumulated so far.
 *   @note Internal method used during tree construction.
 * - `getHuffmanCodes()`: Retrieves the generated Huffman codes as a map.
 *   @return A map of characters to their corresponding Huffman codes.
 *
 * @example
 * ```java
 * Map<Character, Integer> frequencyMap = new HashMap<>();
 * frequencyMap.put('a', 5);
 * frequencyMap.put('b', 9);
 * frequencyMap.put('c', 12);
 * frequencyMap.put('d', 13);
 * frequencyMap.put('e', 16);
 * frequencyMap.put('f', 45);
 *
 * HuffmanTree huffmanTree = new HuffmanTree(frequencyMap);
 * Map<Character, String> codes = huffmanTree.getHuffmanCodes();
 * codes.forEach((k, v) -> System.out.println(k + ": " + v));
 * ```
 */
class HuffmanTree {
    private Map<Character, String> huffmanCodes;
    private HuffmanNode root;

    HuffmanTree(Map<Character, Integer> frequencyMap) {
        MinHeap minHeap = new MinHeap(frequencyMap);

        while (minHeap.size() > 1) {
            HuffmanNode left = minHeap.extractMin();
            HuffmanNode right = minHeap.extractMin();

            HuffmanNode newNode = new HuffmanNode('$', left.frequency + right.frequency);
            newNode.left = left;
            newNode.right = right;

            minHeap.insert(newNode);
        }

        root = minHeap.extractMin();
        huffmanCodes = new HashMap<>();
        generateCodes(root, "");
    }

    /**
     * Recursively generates Huffman codes for all characters in the Huffman Tree.
     * This method traverses the tree and assigns binary codes based on the path taken:
     * '0' for left branches and '1' for right branches.
     *
     * @param node The current `HuffmanNode` being processed.
     * @param code The binary code accumulated so far.
     *
     * @note Leaf nodes represent characters, and their codes are added to the `huffmanCodes` map.
     */
    private void generateCodes(HuffmanNode node, String code) {
        if (node == null) return;

        if (node.data != '$') {
            huffmanCodes.put(node.data, code);
        }

        generateCodes(node.left, code + "0");
        generateCodes(node.right, code + "1");
    }

    /**
     * Retrieves the Huffman codes generated by the Huffman Tree.
     *
     * @return A map of characters to their corresponding binary Huffman codes.
     *
     * @example
     * ```java
     * Map<Character, String> codes = huffmanTree.getHuffmanCodes();
     * codes.forEach((k, v) -> System.out.println(k + ": " + v));
     * ```
     */
    public Map<Character, String> getHuffmanCodes() {
        return huffmanCodes;
    }
}

